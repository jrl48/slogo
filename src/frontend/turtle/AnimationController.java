package frontend.turtle;

import java.util.ArrayList;
import java.util.List;

import javafx.scene.shape.Line;

/** This class is called to segment and control the movement of turtles.
 * 	That is, it maintains a register of the turtles that are currently moving (either dislocating, or turning)
 *  and updated their positions (and line lengths) accordingly.
 *  
 *  The turtle speed is set to a default, but can be controlled easily by a get/set function linked 
 *  to the UI.
 *  
 *  Additionally, should the program be extended to include animation controlling features, 
 *  the initial and final positions of each moving turtle is stored here, to be used if needed.
 *  
 * @author AlanCavalcanti
 *
 */
public class AnimationController 
{
	ArrayList<TurtleAction> timeline;
	
	private double turtleMoveSpeed;
	private double turtleTurnSpeed;
	private static double INITIAL_MOVE_SPEED = 2;
	private static double INITIAL_TURN_SPEED = 5;
	
	public AnimationController()
	{	
		timeline = new ArrayList<TurtleAction>();
		
		// DEFAULT
		turtleMoveSpeed = INITIAL_MOVE_SPEED; 	// pixels per step proc
		turtleTurnSpeed = INITIAL_TURN_SPEED;	// degrees per step proc 
	}
	
	/**
	 * 	This method is called by a JavaFX timeline, and updates the turtles who need to move/turn, in
	 *  order of the timeline, in case multiple turtle commands are added in at once.
	 */
	public void step()
	{	
		if ( timeline.isEmpty() )
		{
			return;
		}
		
		TurtleAction currentAction = timeline.get(0);
		boolean ended;
		
		if ( currentAction.getClass() == MoveTurtleAction.class )
		{
			ended = currentAction.takeAction(turtleMoveSpeed);
		}
		else
		{
			// Pen action or Turn action
			ended = currentAction.takeAction(turtleTurnSpeed);
		}
		
		if ( ended )
		{
			timeline.remove(0);
		}
	}
	
	/**
	 * This method adds to the list of Turtles that are bound to move.
	 * Gives the initial and final positions.
	 * @param turtle
	 * @param initX
	 * @param initY
	 * @param endX
	 * @param endY
	 */
	public void addTurtleToMove(SingleTurtle turtle, List<Double> startPosition, List<Double> endPosition)
	{
		timeline.add(new MoveTurtleAction(turtle, startPosition, endPosition));
	}
	
	/**
	 * This method is simply the same as the other one, but for turtles that have their pen down. 
	 * The line being generated by it are added in as a HasMap to the turtle.
	 * 
	 * @param turtle
	 * @param initX
	 * @param initY
	 * @param endX
	 * @param endY
	 * @param line
	 */
	public void addTurtleToMove(SingleTurtle turtle, List<Double> startPosition, List<Double> endPosition, Line line)
	{
		MoveTurtleAction newAction = new MoveTurtleAction(turtle, startPosition, endPosition);
		newAction.setLine(line);
		timeline.add(newAction);
	}
	
	/**
	 * This method adds in to the turtles that are bound to spin.
	 * 
	 * @param turtle
	 * @param initAngle
	 * @param endAngle
	 * @param isRight
	 */
	public void addTurtleToTurn(SingleTurtle turtle, double initAngle, double endAngle, boolean isRight )
	{
		timeline.add(new TurnTurtleAction(turtle, initAngle, endAngle, isRight));
	}
	
}
